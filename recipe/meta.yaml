{% set version = "3.1.68" %}

# we only want a single python, but not make the package noarch
{% set min_python = "3.9" %}
# we just use a version here; doesn't seem to have much impact
{% set min_nodejs = "18" %}

package:
  name: emscripten
  version: {{ version }}

source:
  url: https://github.com/emscripten-core/emscripten/archive/{{ version }}.tar.gz
  sha256: cfe270764458fcdba148b0f496abbddaeccf176891aa0096ee7b58696e407c08
  patches:
    # from https://github.com/pyodide/pyodide/tree/main/emsdk/patches
    - patches/0001-Add-back-fs.findObject-and-fs.readFile-in-loadLibDat.patch
    - patches/0002-Add-useful-error-when-symbol-resolution-fails.patch
    - patches/0003-Changes-for-JSPI.patch
    - patches/0004-Upstream-PR-https-github.com-emscripten-core-emscrip.patch
    - patches/0005-Raise-when-no-argument-is-given.patch
    - patches/0006-Make-RTLD_LOCAL-work-correctly-for-preloaded-DSOs-21.patch

build:
  number: 0
  string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
  ignore_run_exports_from:
    - python *
    - nodejs *

requirements:
  build:
    - {{ compiler('cxx') }}  # node modules need to compile native extensions
    - {{ stdlib("c") }}
    - python {{ min_python }}
  host:
    - binaryen
    - nodejs {{ min_nodejs }}
    - lld
    - clang
    - clangxx
    - llvm-tools
  run:
    - python *
    - {{ pin_compatible("binaryen", max_pin="x") }}
    - nodejs >={{ min_nodejs }}
    - lld
    - clang
    - clangxx
    - llvm-tools
    # for google closure compiler
    - zlib
  run_constrained:
    # otherwise linter complains (no py-constraints on non-noarch)
    - python >={{ min_python }}

test:
  requires:
    # test that we can co-install with another python than above
    - python ==3.10.*
  files:
    - testfile.c
  commands:
    - emcc --help
    - emcc ./testfile.c
    - node a.out.js

about:
  home: https://emscripten.org/
  license: MIT OR NCSA OR MPL-2.0
  license_file: LICENSE
  summary: Emscripten compiles C and C++ to WebAssembly using LLVM and Binaryen. Emscripten output can run on the Web, in Node.js, and in wasm runtimes.
  dev_url: https://github.com/emscripten-core/emscripten

extra:
  recipe-maintainers:
    - wolfv
    - h-vetinari
