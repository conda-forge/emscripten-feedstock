# TODO: check what LLVM hash emscripten requires later on
{% set version = "4.0.9" %}
{% set llvm_version = "20" %}

# we just use a version here; doesn't seem to have much impact
{% set min_nodejs = "20" %}

package:
  name: emscripten
  version: {{ version }}

source:
  url: https://github.com/emscripten-core/emscripten/archive/{{ version }}.tar.gz
  sha256: 11a7d950453ee31da03ee3c3b261934ad3d7d2e470e41ea3222a13cecb9b98ef

build:
  number: 0
  string: h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
  ignore_run_exports_from:
    - python *
    - nodejs *

requirements:
  build:
    - {{ stdlib("c") }}
    - python
    - nodejs {{ min_nodejs }}
    - file  # [unix]
  host:
    # Each emscripten version expects a particular version of binaryen.
    # If the binaryen version is different, emscripten issues a warning.
    - binaryen  117.*
    - lld {{ llvm_version }}.*
    - clang {{ llvm_version }}.*
    - clangxx {{ llvm_version }}.*
    - llvm-tools {{ llvm_version }}.*
  run:
    - python
    - {{ pin_compatible("binaryen", max_pin="x") }}
    - nodejs >={{ min_nodejs }}
    - lld {{ llvm_version }}.*
    - clang {{ llvm_version }}.*
    - clangxx {{ llvm_version }}.*
    - llvm-tools {{ llvm_version }}.*
    # for google closure compiler
    - zlib

test:
  # disabled due to https://github.com/conda/conda-libmamba-solver/issues/677
  # requires:
  #   # test that we can still use python_min (i.e. haven't picked up too-tight constraint somehow)
  #   - python {{ python_min }}.*
  files:
    - testfile.c
  commands:
    - emcc --help
    - emcc ./testfile.c
    - node a.out.js

about:
  home: https://emscripten.org/
  license: MIT OR NCSA OR MPL-2.0
  license_file: LICENSE
  summary: Emscripten compiles C and C++ to WebAssembly using LLVM and Binaryen. Emscripten output can run on the Web, in Node.js, and in wasm runtimes.
  dev_url: https://github.com/emscripten-core/emscripten

extra:
  recipe-maintainers:
    - wolfv
    - h-vetinari
